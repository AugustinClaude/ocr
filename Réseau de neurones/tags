!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
C	Makefile	/^C = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -O3$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =$/;"	m
EXE	Makefile	/^EXE = ${SRC:.c=}$/;"	m
LDLIBS	Makefile	/^LDLIBS = -lm$/;"	m
LR	xornetwork.c	5;"	d	file:
NB_HIDDEN	xornetwork.c	7;"	d	file:
NB_INPUT	xornetwork.c	6;"	d	file:
NB_OUT	xornetwork.c	8;"	d	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
SRC	Makefile	/^SRC = xornetwork.c $/;"	m
activation	xornetwork.c	/^double activation(float value){$/;"	f	signature:(float value)
bias	xornetwork.c	/^    double bias;$/;"	m	struct:neural_second_layer	file:	access:public
bias	xornetwork.c	/^    double bias;$/;"	m	struct:out	file:	access:public
calculate_error_gradient_hidden	xornetwork.c	/^double calculate_error_gradient_hidden(double output, double weight, double gradient){$/;"	f	signature:(double output, double weight, double gradient)
calculate_error_gradient_out	xornetwork.c	/^void calculate_error_gradient_out(struct out o,double e){$/;"	f	signature:(struct out o,double e)
calculate_expected	xornetwork.c	/^double calculate_expected(int i1,int i2)$/;"	f	signature:(int i1,int i2)
change_hidden_weigth_apply	xornetwork.c	/^void change_hidden_weigth_apply(struct neural_first_layer *l1,struct neural_second_layer *l2, struct out out)$/;"	f	signature:(struct neural_first_layer *l1,struct neural_second_layer *l2, struct out out)
change_out_weigth_apply	xornetwork.c	/^void change_out_weigth_apply(struct out out, double g, struct  neural_second_layer *l2)$/;"	f	signature:(struct out out, double g, struct neural_second_layer *l2)
generate	xornetwork.c	/^void generate(int *a)$/;"	f	signature:(int *a)
generate_weigth	xornetwork.c	/^double generate_weigth(int nb_next)$/;"	f	signature:(int nb_next)
gradient	xornetwork.c	/^    double gradient;$/;"	m	struct:out	file:	access:public
gradient_out	xornetwork.c	/^void gradient_out(struct out out_n, struct neural_second_layer *layer, double gradient, double lr){$/;"	f	signature:(struct out out_n, struct neural_second_layer *layer, double gradient, double lr)
init_all	xornetwork.c	/^void init_all(struct neural_first_layer *layer1, struct neural_second_layer *layer2, struct out o1)$/;"	f	signature:(struct neural_first_layer *layer1, struct neural_second_layer *layer2, struct out o1)
input1	xornetwork.c	/^}input1,input2;$/;"	v	typeref:struct:neural_first_layer
input2	xornetwork.c	/^}input1,input2;$/;"	v	typeref:struct:neural_first_layer
learnrate	xornetwork.c	/^double learnrate = 0.1;$/;"	v
main	xornetwork.c	/^int main()$/;"	f
neural_first_layer	xornetwork.c	/^struct neural_first_layer$/;"	s	file:
neural_first_layer::value	xornetwork.c	/^    int value;$/;"	m	struct:neural_first_layer	file:	access:public
neural_first_layer::weights	xornetwork.c	/^    double weights[2];$/;"	m	struct:neural_first_layer	file:	access:public
neural_second_layer	xornetwork.c	/^struct neural_second_layer$/;"	s	file:
neural_second_layer::bias	xornetwork.c	/^    double bias;$/;"	m	struct:neural_second_layer	file:	access:public
neural_second_layer::value	xornetwork.c	/^    double value;$/;"	m	struct:neural_second_layer	file:	access:public
neural_second_layer::weights	xornetwork.c	/^    double weights[NB_OUT];$/;"	m	struct:neural_second_layer	file:	access:public
new_weigth	xornetwork.c	/^double new_weigth(double lr, double value,double gradient){$/;"	f	signature:(double lr, double value,double gradient)
out	xornetwork.c	/^struct out$/;"	s	file:
out::bias	xornetwork.c	/^    double bias;$/;"	m	struct:out	file:	access:public
out::gradient	xornetwork.c	/^    double gradient;$/;"	m	struct:out	file:	access:public
out::second_layer	xornetwork.c	/^    struct neural_second_layer second_layer[2];$/;"	m	struct:out	typeref:struct:out::neural_second_layer	file:	access:public
out::value	xornetwork.c	/^    double value;$/;"	m	struct:out	file:	access:public
second_layer	xornetwork.c	/^    struct neural_second_layer second_layer[2];$/;"	m	struct:out	typeref:struct:out::neural_second_layer	file:	access:public
sum_first	xornetwork.c	/^double sum_first(struct neural_second_layer neural, struct neural_first_layer n1[2])$/;"	f	signature:(struct neural_second_layer neural, struct neural_first_layer n1[2])
sum_out	xornetwork.c	/^void sum_out(struct out o,struct neural_second_layer second_layer[NB_HIDDEN])$/;"	f	signature:(struct out o,struct neural_second_layer second_layer[NB_HIDDEN])
value	xornetwork.c	/^    double value;$/;"	m	struct:neural_second_layer	file:	access:public
value	xornetwork.c	/^    double value;$/;"	m	struct:out	file:	access:public
value	xornetwork.c	/^    int value;$/;"	m	struct:neural_first_layer	file:	access:public
weights	xornetwork.c	/^    double weights[2];$/;"	m	struct:neural_first_layer	file:	access:public
weights	xornetwork.c	/^    double weights[NB_OUT];$/;"	m	struct:neural_second_layer	file:	access:public
