!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
C	Makefile	/^C = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall -Wextra -fsanitize=address $/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =$/;"	m
EXE	Makefile	/^EXE = ${SRC:.c=}$/;"	m
LDFLAGS	Makefile	/^LDFLAGS= -fsanitize=address$/;"	m
LDLIBS	Makefile	/^LDLIBS = -lm$/;"	m
LR	xornetwork.c	5;"	d	file:
NB_HIDDEN	xornetwork.c	7;"	d	file:
NB_INPUT	xornetwork.c	6;"	d	file:
NB_OUT	xornetwork.c	8;"	d	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
SRC	Makefile	/^SRC = xornetwork.c $/;"	m
activation_hidden	xornetwork.c	/^void activation_hidden(neural_second_layer layer[NB_HIDDEN])$/;"	f	signature:(neural_second_layer layer[NB_HIDDEN])
bias	xornetwork.c	/^    double bias;$/;"	m	struct:neural_second_layer	file:	access:public
bias	xornetwork.c	/^    double bias;$/;"	m	struct:out	file:	access:public
calculate_error_gradient_hidden	xornetwork.c	/^double calculate_error_gradient_hidden(double output, double weight, double gradient)$/;"	f	signature:(double output, double weight, double gradient)
calculate_error_gradient_out	xornetwork.c	/^void calculate_error_gradient_out(out *o, double e)$/;"	f	signature:(out *o, double e)
calculate_expected	xornetwork.c	/^double calculate_expected(int i1, int i2)$/;"	f	signature:(int i1, int i2)
change_hidden_weigth_apply	xornetwork.c	/^void change_hidden_weigth_apply(neural_first_layer l1[NB_INPUT], neural_second_layer l2[NB_HIDDEN], out *out)$/;"	f	signature:(neural_first_layer l1[NB_INPUT], neural_second_layer l2[NB_HIDDEN], out *out)
change_out_weigth_apply	xornetwork.c	/^void change_out_weigth_apply(out *out, double g, neural_first_layer l1[NB_INPUT], neural_second_layer l2[NB_HIDDEN])$/;"	f	signature:(out *out, double g, neural_first_layer l1[NB_INPUT], neural_second_layer l2[NB_HIDDEN])
generate	xornetwork.c	/^void generate(int *a)$/;"	f	signature:(int *a)
generate_weigth	xornetwork.c	/^double generate_weigth(int nb_next)$/;"	f	signature:(int nb_next)
gradient	xornetwork.c	/^    double gradient;$/;"	m	struct:out	file:	access:public
gradient_out	xornetwork.c	/^void gradient_out(out *out_n, neural_second_layer layer[NB_HIDDEN],neural_first_layer layer2[NB_INPUT], double gradient)$/;"	f	signature:(out *out_n, neural_second_layer layer[NB_HIDDEN],neural_first_layer layer2[NB_INPUT], double gradient)
init_all	xornetwork.c	/^void init_all(neural_first_layer layer1[NB_INPUT], neural_second_layer layer2[NB_HIDDEN], out *o1)$/;"	f	signature:(neural_first_layer layer1[NB_INPUT], neural_second_layer layer2[NB_HIDDEN], out *o1)
main	xornetwork.c	/^int main()$/;"	f
neural_first_layer	xornetwork.c	/^typedef struct neural_first_layer$/;"	s	file:
neural_first_layer	xornetwork.c	/^} neural_first_layer;$/;"	t	typeref:struct:neural_first_layer	file:
neural_first_layer::value	xornetwork.c	/^    int value;$/;"	m	struct:neural_first_layer	file:	access:public
neural_first_layer::weight_out	xornetwork.c	/^    double weight_out;$/;"	m	struct:neural_first_layer	file:	access:public
neural_first_layer::weights	xornetwork.c	/^    double weights[NB_HIDDEN];$/;"	m	struct:neural_first_layer	file:	access:public
neural_second_layer	xornetwork.c	/^typedef struct neural_second_layer$/;"	s	file:
neural_second_layer	xornetwork.c	/^} neural_second_layer;$/;"	t	typeref:struct:neural_second_layer	file:
neural_second_layer::bias	xornetwork.c	/^    double bias;$/;"	m	struct:neural_second_layer	file:	access:public
neural_second_layer::value	xornetwork.c	/^    double value;$/;"	m	struct:neural_second_layer	file:	access:public
neural_second_layer::weights	xornetwork.c	/^    double weights[NB_OUT];$/;"	m	struct:neural_second_layer	file:	access:public
new_weigth	xornetwork.c	/^double new_weigth(double lr, double value, double gradient)$/;"	f	signature:(double lr, double value, double gradient)
out	xornetwork.c	/^typedef struct out$/;"	s	file:
out	xornetwork.c	/^} out;$/;"	t	typeref:struct:out	file:
out::bias	xornetwork.c	/^    double bias;$/;"	m	struct:out	file:	access:public
out::gradient	xornetwork.c	/^    double gradient;$/;"	m	struct:out	file:	access:public
out::second_layer	xornetwork.c	/^    struct neural_second_layer second_layer[2];$/;"	m	struct:out	typeref:struct:out::neural_second_layer	file:	access:public
out::value	xornetwork.c	/^    double value;$/;"	m	struct:out	file:	access:public
print_weights	xornetwork.c	/^void print_weights(neural_first_layer l1[NB_INPUT],neural_second_layer l2[NB_HIDDEN], out o1)$/;"	f	signature:(neural_first_layer l1[NB_INPUT],neural_second_layer l2[NB_HIDDEN], out o1)
second_layer	xornetwork.c	/^    struct neural_second_layer second_layer[2];$/;"	m	struct:out	typeref:struct:out::neural_second_layer	file:	access:public
sum_first	xornetwork.c	/^double sum_first(int j,neural_second_layer *neural, neural_first_layer n1[NB_INPUT])$/;"	f	signature:(int j,neural_second_layer *neural, neural_first_layer n1[NB_INPUT])
sum_out	xornetwork.c	/^double sum_out(out *o, neural_second_layer second_layer[NB_HIDDEN], neural_first_layer l1[NB_INPUT])$/;"	f	signature:(out *o, neural_second_layer second_layer[NB_HIDDEN], neural_first_layer l1[NB_INPUT])
value	xornetwork.c	/^    double value;$/;"	m	struct:neural_second_layer	file:	access:public
value	xornetwork.c	/^    double value;$/;"	m	struct:out	file:	access:public
value	xornetwork.c	/^    int value;$/;"	m	struct:neural_first_layer	file:	access:public
weight_out	xornetwork.c	/^    double weight_out;$/;"	m	struct:neural_first_layer	file:	access:public
weights	xornetwork.c	/^    double weights[NB_HIDDEN];$/;"	m	struct:neural_first_layer	file:	access:public
weights	xornetwork.c	/^    double weights[NB_OUT];$/;"	m	struct:neural_second_layer	file:	access:public
